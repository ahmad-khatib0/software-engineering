# create new java app using maven
$ mvn archetype:generate \
   -DgroupId=com.manning.apisecurityinaction \
   -DartifactId=natter-api \
   -DarchetypeArtifactId=maven-archetype-quickstart \
   -DarchetypeVersion=1.4 -DinteractiveMode=false


$ for i in {1..5} do curl -i -d "{\"owner\":\"test\",\"name\":\"space$i\"}" \
 -H ‘Content-Type: application/json’ http://localhost:4567/spaces; done

# For Java, you need the certificate in PKCS#12 format
$ mkcert -pkcs12 localhost

# remove the certificate from os 
$ mkcert -uninstall

# first send the call and store the created cookies in tmp file
$ curl -i -c /tmp/cookies -u test:password -H 'Content-Type: application/json' \
  -X POST https://localhost:4567/sessions
# second use this file to send the cookies back 
$ curl -b /tmp/cookies -H 'Content-Type: application/json' \
  -d '{"name":"test space","owner":"test"}' https://localhost:4567/spaces


# generate a keystore with a 256-bit HMAC key:
$ keytool -genseckey -keyalg HmacSHA256 -keysize 256 -alias hmac-key -keystore keystore.p12 \
  -storetype PKCS12 -storepass changeit

# run with on differnet port, pass env var (changeit)
$ mvn clean compile exec:java -Dexec.args=9999 -Dkeystore.password=changeit -Dkeystore.password=changeit

# to add a new AES key to the existing keystore:
$ keytool -genseckey -keyalg AES -keysize 256 -alias aes-key -keystore keystore.p12 -storepass changeit


# An example of obtaining an access token using the ROPC grant type in oauth: 
$ curl -d 'grant_type=password&client_id=test&scope=read_messages+post_message&username=demo&password=changeit' \
  https://as.example.com:8443/oauth2/access_token



