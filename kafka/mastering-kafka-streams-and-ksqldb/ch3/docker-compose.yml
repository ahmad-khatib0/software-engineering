---
version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "32181:32181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-enterprise-kafka:6.0.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # Listener List - Comma-separated list of URIs we will listen on and the listener names. If the 
      # listener name is not a security protocol, listener.security.protocol.map must also be set. 
      # Listener names and port numbers must be unique. Specify hostname as 0.0.0.0 to bind to all interfaces. 
      # Leave hostname empty to bind to default interface. Examples of legal listener lists: 
      # PLAINTEXT://myhost:9092,SSL://:9091 CLIENT://0.0.0.0:9092,REPLICATION://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      # You need to set KAFKA_ADVERTISED_LISTENERS if you’re using Docker images to the external address 
      # (host/IP) so that clients can correctly connect to it. Otherwise, they’ll try to connect to the 
      # internal host address—and if that’s not reachable, then problems ensue.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # to 1. This is required when you are running with a single-node cluster. 
      # If you have three or more nodes, you can use the default.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Basically it controls the minimum ISR (In-Sync Replicas) for this topic. 
      # If K1 and K2 brokers goes down and only K3 is up then cluster runs fine.
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Internal topic creation will fail until the cluster size meets this replication factor requirement.
    working_dir: /data
    volumes:
    - ./data:/data

  kafka-create-topics:
    image: confluentinc/cp-enterprise-kafka:6.0.0
    depends_on:
      - kafka
    hostname: kafka-create-topics
    command: ["bash", "./create-topics.sh"]
    working_dir: /scripts
    volumes:
    - ./scripts:/scripts

  schema-registry:
    image: confluentinc/cp-schema-registry:6.0.0
    # Schema Registry provides a centralized repository for managing and validating schemas for topic 
    # message data, and for serialization and deserilazation of the data over the network. Producers and 
    # consumers to Kafka topics can use schemas to ensure data consistency and compatibility as schemas evolve.
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:32181
    ports:
      - "8081:8081"
